{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","likes","setLikes","userLike","setUserLike","actionDisplay","display","onClick","id","App","src","logo","alt","href","target","rel","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.e459d023.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useEffect, useState } from 'react';\n\nimport { loadTweets } from '../lookup'\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({\n            content: newVal,\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n        </div>\n        <TweetsList newTweets={newTweets} />\n    </div>\n}\n\n\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    // setTweetsInit([...props.newTweets].concat(tweetsInit))\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        //do lookup\n        const myCallback = (response, status) => {\n            if (status === 200) {\n                setTweetsInit(response)\n            }\n            else {\n                alert(\"There was an error\")\n            }\n        }\n        loadTweets(myCallback)\n    }, [])\n    return tweets.map((item, index) => {\n        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n    })\n}\n\nexport function ActionBtn(props) {\n    const { tweet, action } = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n            if (userLike === true) {\n                setLikes(likes - 1)\n                setUserLike(false)\n            } else {\n                setLikes(likes + 1)\n                setUserLike(true)\n            }\n\n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n\n\nexport function Tweet(props) {\n    const { tweet } = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n            <ActionBtn tweet={tweet} action={{ type: \"like\", display: \"Likes\" }} />\n            <ActionBtn tweet={tweet} action={{ type: \"unlike\", display: \"Unlike\" }} />\n            <ActionBtn tweet={tweet} action={{ type: \"retweet\", display: \"Retweet\" }} />\n        </div>\n    </div>\n}","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET' // \"POST\"\n    const url = \"http://localhost:8000/api/tweets\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {\n      callback(xhr.response,xhr.status)\n    }\n    xhr.onerror = function (e) {\n      callback({\"message\": \"The request was an error\"},400)\n    }\n    xhr.send()\n  }","import logo from './logo.svg';\nimport './App.css';\nimport React, {useEffect, useState} from 'react';\n\nimport {TweetsComponent} from './tweets'\n\n\n\n\n\nfunction App() {\n  \n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\n//import * as serviceWorker from './serviceWorker';\n\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst tweetsEl = document.getElementById(\"tweeterExample\")\nif (tweetsEl) {\n    ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}